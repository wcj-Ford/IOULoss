import mxnet as mx
import HuberLoss

def unet(numclass=2, workspace=8192):
    data = mx.sym.Variable(name='data')
    label_sc = mx.sym.Variable(name='score_label')
    label_tp = mx.sym.Variable(name='top_label')
    label_bt = mx.sym.Variable(name='bottom_label')
    label_lf = mx.sym.Variable(name='left_label')
    label_rt = mx.sym.Variable(name='right_label')
    data = mx.sym.BatchNorm(data=data)
    encode1_conv1 = mx.sym.Convolution(data=data, num_filter=32, kernel=(3,3), stride=(1,1), pad=(1,1), name='encode1_conv1', workspace=workspace)
    encode1_conv1 = mx.sym.Activation(data=encode1_conv1, act_type='relu')
    encode1_conv1 = mx.sym.BatchNorm(data=encode1_conv1)
    encode1_conv2 = mx.sym.Convolution(data=encode1_conv1, num_filter=64, kernel=(3,3), stride=(1,1), pad=(1,1), name='encode1_conv2', workspace=workspace)
    encode1_conv2 = mx.sym.Activation(data=encode1_conv2, act_type='relu')
    encode1_conv2 = mx.sym.BatchNorm(data=encode1_conv2)
    pool1 = mx.sym.Pooling(data=encode1_conv2, kernel=(3,3), stride=(2,2), pad=(1,1), pool_type='max', name='encode1_pool')

    encode2_conv1 = mx.sym.Convolution(data=pool1, num_filter=64, kernel=(3,3), stride=(1,1), pad=(1,1), name='encode2_conv1', workspace=workspace)
    encode2_conv1 = mx.sym.Activation(data=encode2_conv1, act_type='relu')
    encode2_conv1 = mx.sym.BatchNorm(data=encode2_conv1)
    encode2_conv2 = mx.sym.Convolution(data=encode2_conv1, num_filter=128, kernel=(3,3), stride=(1,1), pad=(1,1), name='encode2_conv2', workspace=workspace)
    encode2_conv2 = mx.sym.Activation(data=encode2_conv2, act_type='relu')
    encode2_conv2 = mx.sym.BatchNorm(data=encode2_conv2)
    pool2 = mx.sym.Pooling(data=encode2_conv2, kernel=(3,3), stride=(2,2), pad=(1,1), pool_type='max', name='encode2_pool')     

    encode3_conv1 = mx.sym.Convolution(data=pool2, num_filter=128, kernel=(3,3), stride=(1,1), pad=(1,1), name='encode3_conv1', workspace=workspace)
    encode3_conv1 = mx.sym.Activation(data=encode3_conv1, act_type='relu')
    encode3_conv1 = mx.sym.BatchNorm(data=encode3_conv1)
    encode3_conv2 = mx.sym.Convolution(data=encode3_conv1, num_filter=256, kernel=(3,3), stride=(1,1), pad=(1,1), name='encode3_conv2', workspace=workspace)
    encode3_conv2 = mx.sym.Activation(data=encode3_conv2, act_type='relu')
    encode3_conv2 = mx.sym.BatchNorm(data=encode3_conv2)
    pool3 = mx.sym.Pooling(data=encode3_conv2, kernel=(3,3), stride=(2,2), pad=(1,1), pool_type='max', name='encode3_pool')

    conv1 = mx.sym.BatchNorm(data=pool3)
    conv1 = mx.sym.Activation(data=conv1, act_type='relu')
    conv2 = mx.sym.Convolution(data=conv1, num_filter=256, kernel=(3,3), stride=(1,1), pad=(1,1), name='conv2', workspace=workspace)
    conv2 = mx.sym.BatchNorm(data=conv2)
    conv2 = mx.sym.Activation(data=conv2, act_type='relu')

    upsam3 = mx.sym.UpSampling(data=conv2, num_filter=256, scale=2, sample_type='bilinear', num_args=2, name='upsample3', workspace=workspace)
    crop3 = mx.symbol.Crop(*[upsam3, encode3_conv2], offset=(1,1), center_crop=True)
    concat3 = encode3_conv2+crop3
    decode3_conv1 = mx.sym.Convolution(data=concat3, num_filter=256, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode3_conv1', workspace=workspace)
    decode3_conv1 = mx.sym.BatchNorm(decode3_conv1)
    decode3_conv1 = mx.sym.Activation(data=decode3_conv1, act_type='relu')
    decode3_conv2 = mx.sym.Convolution(data=decode3_conv1, num_filter=128, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode3_conv2', workspace=workspace)
    decode3_conv2 = mx.sym.BatchNorm(data=decode3_conv2)
    decode3_conv2 = mx.sym.Activation(data=decode3_conv2, act_type='relu') 
    
    upsam2 = mx.sym.UpSampling(data=decode3_conv2, num_filter=128, scale=2, sample_type='bilinear', num_args=2, name='upsample2', workspace=workspace)
    crop2 = mx.symbol.Crop(*[upsam2, encode2_conv2], offset=(1,1), center_crop=True)
    concat2 = encode2_conv2+crop2
    decode2_conv1 = mx.sym.Convolution(data=concat2, num_filter=128, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode2_conv1', workspace=workspace)
    decode2_conv1 = mx.sym.BatchNorm(data=decode2_conv1)
    decode2_conv1 = mx.sym.Activation(data=decode2_conv1, act_type='relu')
    decode2_conv2 = mx.sym.Convolution(data=decode2_conv1, num_filter=128, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode2_conv2', workspace=workspace)
    decode2_conv2 = mx.sym.BatchNorm(data=decode2_conv2)
    decode2_conv2 = mx.sym.Activation(data=decode2_conv2, act_type='relu') 
 
    upsam1 = mx.sym.UpSampling(data=decode2_conv2, num_filter=128, scale=2, sample_type='bilinear', num_args=2, name='upsample1', workspace=workspace)
    crop1 = mx.symbol.Crop(*[upsam1, encode1_conv2], offset=(2,2), center_crop=True)
    decode1_conv1 = mx.sym.Convolution(data=crop1, num_filter=64, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode1_conv1', workspace=workspace)
    decode1_conv1 = mx.sym.BatchNorm(data=decode1_conv1)
    decode1_conv1 = mx.sym.Activation(data=decode1_conv1, act_type='relu')
    decode1_conv2_sc = mx.sym.Convolution(data=decode1_conv1, num_filter=64, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode1_conv2_sc', workspace=workspace)
    decode1_conv2_sc = mx.sym.BatchNorm(data=decode1_conv2_sc)
    decode1_conv2_sc = mx.sym.Activation(data=decode1_conv2_sc, act_type='relu')
    decode1_conv2_tp = mx.sym.Convolution(data=decode1_conv1, num_filter=64, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode1_conv2_tp', workspace=workspace)
    decode1_conv2_tp = mx.sym.BatchNorm(data=decode1_conv2_tp)
    decode1_conv2_tp = mx.sym.Activation(data=decode1_conv2_tp, act_type='relu')
    decode1_conv2_bt = mx.sym.Convolution(data=decode1_conv1, num_filter=64, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode1_conv2_bt', workspace=workspace)
    decode1_conv2_bt = mx.sym.BatchNorm(data=decode1_conv2_bt)
    decode1_conv2_bt = mx.sym.Activation(data=decode1_conv2_bt, act_type='relu')
    decode1_conv2_lf = mx.sym.Convolution(data=decode1_conv1, num_filter=64, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode1_conv2_lf', workspace=workspace)
    decode1_conv2_lf = mx.sym.BatchNorm(data=decode1_conv2_lf)
    decode1_conv2_lf = mx.sym.Activation(data=decode1_conv2_lf, act_type='relu')
    decode1_conv2_rt = mx.sym.Convolution(data=decode1_conv1, num_filter=64, kernel=(3,3), stride=(1,1), pad=(1,1), name='decode1_conv2_rt', workspace=workspace)
    decode1_conv2_rt = mx.sym.BatchNorm(data=decode1_conv2_rt)
    decode1_conv2_rt = mx.sym.Activation(data=decode1_conv2_rt, act_type='relu')

    conv_sc = mx.sym.Convolution(data=decode1_conv2_sc, num_filter=1, kernel=(1,1), stride=(1,1), name='conv_sc', workspace=workspace)
    conv_sc = mx.sym.Activation(data=conv_sc, act_type='relu')
    conv_tp = mx.sym.Convolution(data=decode1_conv2_tp, num_filter=1, kernel=(1,1), stride=(1,1), name='conv_tp', workspace=workspace)
    conv_tp = mx.sym.Activation(data=conv_tp, act_type='relu')
    conv_bt = mx.sym.Convolution(data=decode1_conv2_bt, num_filter=1, kernel=(1,1), stride=(1,1), name='conv_bt', workspace=workspace)
    conv_bt = mx.sym.Activation(data=conv_bt, act_type='relu')
    conv_lf = mx.sym.Convolution(data=decode1_conv2_lf, num_filter=1, kernel=(1,1), stride=(1,1), name='conv_lf', workspace=workspace)
    conv_lf = mx.sym.Activation(data=conv_lf, act_type='relu')
    conv_rt = mx.sym.Convolution(data=decode1_conv2_rt, num_filter=1, kernel=(1,1), stride=(1,1), name='conv_rt', workspace=workspace)
    conv_rt = mx.sym.Activation(data=conv_rt, act_type='relu')
    
    loss_sc = mx.symbol.LogisticRegressionOutput(data=conv_sc, label=label_sc, name='loss_sc')
    tp_label = mx.symbol.Concat(label_sc, label_tp)
    loss_tp = mx.symbol.Custom(data=conv_tp, label=tp_label, name='loss_tp', op_type='HuberLoss')
    bt_label = mx.symbol.Concat(label_sc, label_bt)
    loss_bt = mx.symbol.Custom(data=conv_bt, label=bt_label, name='loss_bt', op_type='HuberLoss')
    lf_label = mx.symbol.Concat(label_sc, label_lf)
    loss_lf = mx.symbol.Custom(data=conv_lf, label=lf_label, name='loss_lf', op_type='HuberLoss')
    rt_label = mx.symbol.Concat(label_sc, label_rt)
    loss_rt = mx.symbol.Custom(data=conv_rt, label=rt_label, name='loss_rt', op_type='HuberLoss')
    
    syb_out = mx.symbol.Group([loss_sc, loss_tp, loss_bt, loss_lf, loss_rt])
    return syb_out

def get_unet(workspace=8192):
    softmax = unet(workspace=8192)
    return softmax
